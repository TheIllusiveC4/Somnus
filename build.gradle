plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation fabricApi.module("fabric-api-base", project.fabric_version)
    modImplementation fabricApi.module("fabric-entity-events-v1", project.fabric_version)

    include fabricApi.module("fabric-api-base", project.fabric_version)
    include fabricApi.module("fabric-entity-events-v1", project.fabric_version)
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

sourceSets {
    main {
        resources {
            srcDirs += 'docs'
        }
    }
}

curseforge {
    project {
        apiKey = findProperty('curseKey') ?: 0
        id = "${curse_id}"
        releaseType = "${curse_release}"
        changelogType = 'markdown'
        changelog = file('docs/CHANGELOG.md')
        addGameVersion "Java 8"
        addGameVersion "Fabric"
        addGameVersion project.minecraft_version
        addArtifact(sourcesJar)
        mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))

        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

publishing {
    tasks.publish.dependsOn 'build'

    publications {
        mavenJava(MavenPublication) {
            artifactId = project.archives_base_name

            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {

        if (project.hasProperty('urlMaven')) {

            if (project.hasProperty('userMaven') && project.hasProperty('passMaven')) {

                maven {
                    url urlMaven
                    credentials {
                        username userMaven
                        password passMaven
                    }
                }
            }
        }
    }
}
